import os
import telebot
from telebot import types
from config import Token, ADMIN
from datetime import datetime
import sqlite3
from apscheduler.schedulers.background import BackgroundScheduler

API_TOKEN = os.environ.get(Token)
bot = telebot.TeleBot(Token)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    username TEXT,
    first_name TEXT,
    registration_date TEXT,
    referral_id INTEGER DEFAULT NULL,
    balance REAL DEFAULT 0
)
''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS broadcasts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    message_text TEXT,
    photo_id TEXT DEFAULT NULL,
    send_time TEXT,
    status TEXT DEFAULT 'pending'
)
''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    game TEXT,
    product TEXT,
    description TEXT,
    price REAL,
    game_id TEXT,
    payment_method TEXT,
    status TEXT,
    timestamp TEXT,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
''')
conn.commit()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤
temp_orders = {}

# –°–ª–æ–≤–∞—Ä—å —Å —Ç–æ–≤–∞—Ä–∞–º–∏ Brawl Stars
brawl_stars_products = {
    'gemi30_pokupka': {'name': '30 üíé', 'price': 230, 'desc': '30 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars'},
    'gemi30_pokupka1': {'name': '80 üíé', 'price': 560, 'desc': '80 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars'},
    'gemi30_pokupka2': {'name': '170 üíé', 'price': 1100, 'desc': '170 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars'},
    'gemi30_pokupka3': {'name': '360 üíé', 'price': 2150, 'desc': '360 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars'},
    'gemi30_pokupka4': {'name': '950 üíé', 'price': 4900, 'desc': '950 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars'},
    'gemi30_pokupka5': {'name': '2000 üíé', 'price': 9220, 'desc': '2000 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars'},
    'gemi30_pokupka6': {'name': 'Brawl Pass', 'price': 230, 'desc': '–ë—Ä–∞–≤–ª –ü–∞—Å—Å –Ω–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω'}
}

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
def register_user(user_id, username, first_name, referral_id=None):
    try:
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        existing_user = cursor.fetchone()
        if not existing_user:
            registration_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            cursor.execute(
                'INSERT INTO users (user_id, username, first_name, registration_date, referral_id) VALUES (?, ?, ?, ?, ?)',
                (user_id, username, first_name, registration_date, referral_id))
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –±–∞–ª–∞–Ω—Å –Ω–∞ 5 –µ–¥–∏–Ω–∏—Ü
            if referral_id:
                cursor.execute('UPDATE users SET balance = balance + 5 WHERE user_id = ?', (referral_id,))
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
@bot.message_handler(commands=['start'])
def start(message):
    args = message.text.split()
    referral_id = None
    if len(args) > 1:
        try:
            referral_id = int(args[1])
        except ValueError:
            pass
    register_user(message.from_user.id, message.from_user.username, message.from_user.first_name, referral_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üõç–ú–∞–≥–∞–∑–∏–Ω")
    btn3 = types.KeyboardButton("üë§–ü—Ä–æ—Ñ–∏–ª—å")
    btn4 = types.KeyboardButton("üë®‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    btn5 = types.KeyboardButton("üì∞–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    markup.add(btn1, btn3, btn4, btn5)
    bot.send_message(message.chat.id,
                     text="–ü—Ä–∏–≤–µ—Ç {0.first_name} ! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –ø–æ–∫—É–ø–∫–µ –¥–æ–Ω–∞—Ç–∞! ‚ö°Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.".format(
                         message.from_user), reply_markup=markup)

# === –ú–µ–Ω—é Brawl Stars ===
def show_brawlstars_menu(call):
    new_markup = types.InlineKeyboardMarkup()
    gemi30button = types.InlineKeyboardButton("üíé 30 - 230 ‚ÇΩ", callback_data='gemi30_button')
    gemi80button = types.InlineKeyboardButton("üíé 80 - 560 ‚ÇΩ", callback_data='gemi80_button')
    gemi170button = types.InlineKeyboardButton("üíé 170 - 1100 ‚ÇΩ", callback_data='gemi170_button')
    gemi360button = types.InlineKeyboardButton("üíé 360 - 2150 ‚ÇΩ", callback_data='gemi360_button')
    gemi950button = types.InlineKeyboardButton("üíé 950 - 4900 ‚ÇΩ", callback_data='gemi950_button')
    gemi2000button = types.InlineKeyboardButton("üíé 2000 - 9220 ‚ÇΩ", callback_data='gemi2000_button')
    brawlpassbutton = types.InlineKeyboardButton("–ë—Ä–∞–≤–ª –ü–∞—Å—Å‚ö°Ô∏è", callback_data='brawlpass_button')
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')
    new_markup.row(gemi30button, gemi80button)
    new_markup.row(gemi170button, gemi360button)
    new_markup.row(gemi950button, gemi2000button)
    new_markup.row(brawlpassbutton)
    new_markup.row(back_button)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–ú–∞–≥–∞–∑–∏–Ω / Brawl Stars:",
        reply_markup=new_markup
    )

def init_db():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        username TEXT,
        game TEXT NOT NULL,
        product TEXT NOT NULL,
        description TEXT,
        price REAL NOT NULL,
        game_id TEXT NOT NULL,
        payment_method TEXT,
        payment_proof TEXT,
        status TEXT NOT NULL,
        admin_id INTEGER,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        confirmed_at DATETIME,
        completed_at DATETIME
    )
    ''')
    conn.commit()

init_db()

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
temp_orders = {}  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
temp_payments = {}  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
admin_orders = {}  # –ó–∞–∫–∞–∑—ã, –≤–∑—è—Ç—ã–µ –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∞–º–∏

# === –ü—Ä–æ–¥—É–∫—Ç—ã Brawl Stars ===
brawl_stars_products = {
    'gemi30_pokupka': {'name': '30 üíé', 'price': 230, 'desc': '30 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars'},
    'gemi30_pokupka1': {'name': '80 üíé', 'price': 560, 'desc': '80 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars'},
    'gemi30_pokupka2': {'name': '170 üíé', 'price': 1100, 'desc': '170 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars'},
    'gemi30_pokupka3': {'name': '360 üíé', 'price': 2150, 'desc': '360 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars'},
    'gemi950_pokupka4': {'name': '950 üíé', 'price': 4900, 'desc': '950 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars'},
    'gemi2000_pokupka5': {'name': '2000 üíé', 'price': 9220, 'desc': '2000 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars'},
    'gemi30_pokupka6': {'name': 'Brawl Pass', 'price': 230, 'desc': '–ë—Ä–∞–≤–ª –ü–∞—Å—Å –Ω–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω'}
}

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ ===
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == 'brawlstart_button':
        show_brawlstars_menu(call)
    elif call.data == 'pubgmobile_button':
        bot.send_message(call.message.chat.id, "üõ† –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    elif call.data == 'back_to_main':
        show_main_menu(call)
    elif call.data in ['gemi30_button', 'gemi80_button', 'gemi170_button',
                       'gemi360_button', 'gemi950_button', 'gemi2000_button', 'brawlpass_button']:
        show_product_description(call)
    elif call.data in brawl_stars_products.keys():
        handle_purchase(call)
    elif call.data.startswith('confirm_'):
        confirm_order(call)
    elif call.data.startswith('change_'):
        change_game_id(call)
    elif call.data.startswith('cancel_'):
        cancel_order(call)
    elif call.data.startswith('pay_'):
        process_payment(call)
    elif call.data.startswith('admin_confirm_'):
        handle_admin_confirm(call)
    elif call.data.startswith('admin_reject_'):
        handle_admin_reject(call)
    elif call.data.startswith('admin_complete_'):
        handle_admin_complete(call)
    elif call.data == 'history_button':
        callback_show_purchase_history(call)
    elif call.data == 'balans_button':
        show_balance_topup(call)
    elif call.data == 'ref_button':
        referral_system(call)
    elif call.data == 'main_menu':
        main_menu_callback(call)
    elif call.data == 'otzivi':
        bot.answer_callback_query(call.id, "–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.", show_alert=True)

# === –ú–µ–Ω—é ===
def show_main_menu(call):
    markup = types.InlineKeyboardMarkup()
    brawlstarts = types.InlineKeyboardButton("Brawl Stars", callback_data='brawlstart_button')
    pubg = types.InlineKeyboardButton("Pubg Mobile", callback_data='pubgmobile_button')
    markup.add(brawlstarts, pubg)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Ç–æ–≤–∞—Ä:", reply_markup=markup)

def show_brawlstars_menu(call):
    new_markup = types.InlineKeyboardMarkup()
    gemi30button = types.InlineKeyboardButton("üíé 30 - 230 ‚ÇΩ", callback_data='gemi30_button')
    gemi80button = types.InlineKeyboardButton("üíé 80 - 560 ‚ÇΩ", callback_data='gemi80_button')
    gemi170button = types.InlineKeyboardButton("üíé 170 - 1100 ‚ÇΩ", callback_data='gemi170_button')
    gemi360button = types.InlineKeyboardButton("üíé 360 - 2150 ‚ÇΩ", callback_data='gemi360_button')
    gemi950button = types.InlineKeyboardButton("üíé 950 - 4900 ‚ÇΩ", callback_data='gemi950_button')
    gemi2000button = types.InlineKeyboardButton("üíé 2000 - 9220 ‚ÇΩ", callback_data='gemi2000_button')
    brawlpassbutton = types.InlineKeyboardButton("–ë—Ä–∞–≤–ª –ü–∞—Å—Å‚ö°Ô∏è", callback_data='brawlpass_button')
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')
    new_markup.row(gemi30button, gemi80button)
    new_markup.row(gemi170button, gemi360button)
    new_markup.row(gemi950button, gemi2000button)
    new_markup.row(brawlpassbutton)
    new_markup.row(back_button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–ú–∞–≥–∞–∑–∏–Ω / Brawl Stars:", reply_markup=new_markup)

def show_product_description(call):
    product_map = {
        'gemi30_button': {'name': '30 üíé', 'price': 230, 'desc': '30 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars', 'callback': 'gemi30_pokupka'},
        'gemi80_button': {'name': '80 üíé', 'price': 560, 'desc': '80 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars', 'callback': 'gemi30_pokupka1'},
        'gemi170_button': {'name': '170 üíé', 'price': 1100, 'desc': '170 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars', 'callback': 'gemi30_pokupka2'},
        'gemi360_button': {'name': '360 üíé', 'price': 2150, 'desc': '360 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars', 'callback': 'gemi30_pokupka3'},
        'gemi950_button': {'name': '950 üíé', 'price': 4900, 'desc': '950 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars', 'callback': 'gemi950_pokupka4'},
        'gemi2000_button': {'name': '2000 üíé', 'price': 9220, 'desc': '2000 –≥–µ–º–æ–≤ –¥–ª—è Brawl Stars', 'callback': 'gemi2000_pokupka5'},
        'brawlpass_button': {'name': 'Brawl Pass', 'price': 230, 'desc': '–ë—Ä–∞–≤–ª –ü–∞—Å—Å –Ω–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω', 'callback': 'gemi30_pokupka6'}
    }
    product = product_map[call.data]
    markup = types.InlineKeyboardMarkup()
    buy_btn = types.InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=product['callback'])
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='brawlstart_button')
    markup.add(buy_btn, back_btn)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üõç –¢–æ–≤–∞—Ä: {product['name']}\n"
             f"üí∞ –¶–µ–Ω–∞: {product['price']} RUB\n"
             f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['desc']}\n"
             f"üìñ –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç, –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö!",
        reply_markup=markup
    )

# --- –ë–ª–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π ---
@bot.message_handler(func=lambda message: message.text == "üë§–ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    cursor.execute('SELECT balance, registration_date FROM users WHERE user_id = ?', (message.from_user.id,))
    result = cursor.fetchone()
    if result:
        balance, registration_date = result
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("–†–µ—Ñ —Å–∏—Å—Ç–µ–º–∞", callback_data='ref_button')
        )
        markup.add(
            types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data='history_button'),
        )
        bot.send_message(
            message.chat.id,
            f"üìã–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {message.from_user.first_name}\n"
            f"ID: {message.from_user.id}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n",
            reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

@bot.callback_query_handler(func=lambda call: call.data == 'history_button')
def callback_show_purchase_history(call):
    user_id = call.from_user.id
    cursor.execute('SELECT id, product, price, status, timestamp FROM orders WHERE user_id = ? ORDER BY timestamp DESC', (user_id,))
    orders = cursor.fetchall()
    if not orders:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.", show_alert=True)
        return
    text = "üì¶ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n"
    for order in orders:
        order_id, product, price, status, timestamp = order
        text += (f"–ó–∞–∫–∞–∑ #{order_id}\n"
                 f"–¢–æ–≤–∞—Ä: {product}\n"
                 f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n"
                 f"–°—Ç–∞—Ç—É—Å: {status}\n"
                 f"–î–∞—Ç–∞: {timestamp}\n\n")
    bot.send_message(call.message.chat.id, text)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'balans_button')
def show_balance_topup(call):
    bot.answer_callback_query(call.id)
    bot.send_message(
        call.message.chat.id,
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @qwerty258b\n"
        "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
    )

@bot.callback_query_handler(func=lambda call: call.data == 'ref_button')
def referral_system(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    cursor.execute('SELECT COUNT(*) FROM users WHERE referral_id = ?', (user_id,))
    referrals_count = cursor.fetchone()[0]
    referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    bot.send_message(
        call.message.chat.id,
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {referrals_count}\n"
        f"–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 15% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!"
    )

@bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
def main_menu_callback(call):
    bot.answer_callback_query(call.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üõç–ú–∞–≥–∞–∑–∏–Ω")
    btn3 = types.KeyboardButton("üë§–ü—Ä–æ—Ñ–∏–ª—å")
    btn4 = types.KeyboardButton("üë®‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    btn5 = types.KeyboardButton("üì∞–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    markup.add(btn1, btn3, btn4, btn5)
    bot.send_message(call.message.chat.id,
                     text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin(message):
    if message.chat.id == ADMIN:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        btn2 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        btn3 = types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        btn4 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        btn5 = types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
        btn6 = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂")
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
        bot.send_message(
            message.chat.id,
            text="‚úÖ –í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id, text="‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def show_statistics(message):
    if message.chat.id != ADMIN:
        bot.send_message(message.chat.id, text="‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    cursor.execute('SELECT user_id, username, first_name, registration_date FROM users')
    users = cursor.fetchall()
    conn.close()
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    for user in users:
        user_id, username, first_name, registration_date = user
        stats_text += f"ID: {user_id}, –ò–º—è: {first_name}, Username: @{username}, –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {registration_date}\n"
    bot.send_message(message.chat.id, text=stats_text)

# –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def go_to_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üõç–ú–∞–≥–∞–∑–∏–Ω")
    btn3 = types.KeyboardButton("üë§–ü—Ä–æ—Ñ–∏–ª—å")
    btn4 = types.KeyboardButton("üë®‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    btn5 = types.KeyboardButton("üì∞–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    markup.add(btn1, btn3, btn4, btn5)
    bot.send_message(message.chat.id,
                     text="–ü—Ä–∏–≤–µ—Ç {0.first_name} ! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –ø–æ–∫—É–ø–∫–µ –¥–æ–Ω–∞—Ç–∞! ‚ö°Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.".format(
                         message.from_user), reply_markup=markup)

# –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
def handle_create_broadcast(message):
    if message.chat.id == ADMIN:
        create_broadcast(message)
    else:
        bot.send_message(message.chat.id, text="‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

# –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
def handle_cancel_broadcast(message):
    if message.chat.id == ADMIN:
        cancel_broadcast(message)
    else:
        bot.send_message(message.chat.id, text="‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
@bot.message_handler(func=lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
def admin_orders_list(message):
    if message.chat.id != ADMIN:
        bot.send_message(message.chat.id, "‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    admin_show_orders(message)

@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂")
def admin_show_stats(message):
    if message.chat.id != ADMIN:
        bot.send_message(message.chat.id, "‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    admin_sales_statistics(message)

# === –ú–∞–≥–∞–∑–∏–Ω ===
@bot.message_handler(func=lambda message: message.text == "üõç–ú–∞–≥–∞–∑–∏–Ω")
def open_shop(message):
    markup = types.InlineKeyboardMarkup()
    brawlstarts = types.InlineKeyboardButton("Brawl Stars", callback_data='brawlstart_button')
    pubg = types.InlineKeyboardButton("Pubg Mobile", callback_data='pubgmobile_button')
    markup.add(brawlstarts, pubg)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Ç–æ–≤–∞—Ä:", reply_markup=markup)

# === –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ===
@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def support(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.chat.id, text="–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å - @qwerty258b")

# === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===
@bot.message_handler(func=lambda message: message.text == "üì∞–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def info(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup_info = types.InlineKeyboardMarkup()
    otzivibutton = types.InlineKeyboardButton("–û—Ç–∑—ã–≤—ã", callback_data='otzivi')
    markup_info.add(otzivibutton)
    bot.send_message(message.chat.id,
                     text="üì∞ –ù–∞—à –∫–∞–Ω–∞–ª - https://\n‚ö†Ô∏è –ü—É–±–ª–∏–∫—É–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
                     reply_markup=markup_info)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ===
def create_broadcast(message):
    bot.send_message(ADMIN, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    bot.register_next_step_handler(message, process_broadcast_text)

def process_broadcast_text(message):
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', '/cancel']:
        cancel_broadcast_creation(message)
        return
    broadcast_text = message.text
    bot.send_message(ADMIN, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' (–∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    bot.register_next_step_handler(message, lambda msg: process_broadcast_photo(msg, broadcast_text))

def process_broadcast_photo(message, broadcast_text):
    if message.text and message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', '/cancel']:
        cancel_broadcast_creation(message)
        return
    photo_id = None
    if message.content_type == 'photo':
        photo_id = message.photo[-1].file_id
    elif message.text.lower() == '–Ω–µ—Ç':
        photo_id = None
    else:
        bot.send_message(ADMIN, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –±–µ–∑ —Ñ–æ—Ç–æ.")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å"), types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"), types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    bot.send_message(ADMIN, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'):", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: choose_broadcast_method(msg, broadcast_text, photo_id))

def choose_broadcast_method(message, broadcast_text, photo_id):
    if message.text == "–û—Ç–º–µ–Ω–∞" or message.text == "/cancel":
        admin(message)
    elif message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å":
        send_immediately(broadcast_text, photo_id)
    elif message.text == "–í—ã–±—Ä–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è":
        bot.send_message(ADMIN, "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:")
        bot.register_next_step_handler(message, lambda msg: save_scheduled_broadcast(msg, broadcast_text, photo_id))
    else:
        bot.send_message(ADMIN, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def save_scheduled_broadcast(message, broadcast_text, photo_id):
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', '/cancel']:
        cancel_broadcast_creation(message)
        return
    try:
        send_time = datetime.strptime(message.text, '%Y-%m-%d %H:%M')
        current_time = datetime.now()
        if send_time < current_time:
            bot.send_message(ADMIN, "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        cursor.execute('INSERT INTO broadcasts (message_text, photo_id, send_time) VALUES (?, ?, ?)',
                       (broadcast_text, photo_id, send_time.strftime('%Y-%m-%d %H:%M')))
        conn.commit()
        bot.send_message(ADMIN, "–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!")
    except ValueError:
        bot.send_message(ADMIN, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def send_immediately(broadcast_text, photo_id):
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    for user in users:
        user_id = user[0]
        try:
            if photo_id:
                bot.send_photo(user_id, photo_id, caption=broadcast_text)
            else:
                bot.send_message(user_id, broadcast_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    bot.send_message(ADMIN, "–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

def cancel_broadcast_creation(message):
    bot.send_message(ADMIN, "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return

@bot.message_handler(commands=['cancel_broadcast'])
def cancel_broadcast(message):
    if message.chat.id != ADMIN:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    cursor.execute('SELECT id, message_text, send_time FROM broadcasts WHERE status = ?', ('pending',))
    broadcasts = cursor.fetchall()
    if not broadcasts:
        bot.send_message(ADMIN, "–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç.")
        return
    broadcast_list = "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
    for broadcast in broadcasts:
        broadcast_id, message_text, send_time = broadcast
        broadcast_list += f"ID: {broadcast_id}, –í—Ä–µ–º—è: {send_time}, –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:50]}...\n"
    bot.send_message(ADMIN, broadcast_list)
    bot.send_message(ADMIN, "–í–≤–µ–¥–∏—Ç–µ ID —Ä–∞—Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:")

def process_cancel_broadcast(message):
    try:
        broadcast_id = int(message.text)
        cursor.execute('SELECT * FROM broadcasts WHERE id = ? AND status = ?', (broadcast_id, 'pending'))
        broadcast = cursor.fetchone()
        if not broadcast:
            bot.send_message(ADMIN, "–†–∞—Å—Å—ã–ª–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
            return
        cursor.execute('UPDATE broadcasts SET status = ? WHERE id = ?', ('cancelled', broadcast_id))
        conn.commit()
        bot.send_message(ADMIN, f"–†–∞—Å—Å—ã–ª–∫–∞ —Å ID {broadcast_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except ValueError:
        bot.send_message(ADMIN, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ ===
def handle_purchase(call):
    product = brawl_stars_products[call.data]
    msg = bot.send_message(
        call.message.chat.id,
        f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏: {product['name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {product['price']} RUB\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['desc']}\n"
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π ID –≤ Brawl Stars (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
    )
    bot.register_next_step_handler(msg, process_game_id, product)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ ID ===
def process_game_id(message, product):
    try:
        game_id = message.text.strip()
        if not game_id.isdigit():
            msg = bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞: –ò–≥—Ä–æ–≤–æ–π ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:"
            )
            bot.register_next_step_handler(msg, process_game_id, product)
            return
        temp_order = {
            'user_id': message.from_user.id,
            'username': message.from_user.username,
            'game': 'Brawl Stars',
            'product': product['name'],
            'description': product['desc'],
            'price': product['price'],
            'game_id': game_id
        }
        temp_orders[message.from_user.id] = temp_order
        markup = types.InlineKeyboardMarkup(row_width=2)
        confirm_btn = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{message.from_user.id}")
        change_btn = types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ID", callback_data=f"change_{message.from_user.id}")
        cancel_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{message.from_user.id}")
        markup.add(confirm_btn, change_btn, cancel_btn)
        bot.send_message(
            message.chat.id,
            f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n"
            f"üéÆ –ò–≥—Ä–∞: Brawl Stars\n"
            f"üõç –¢–æ–≤–∞—Ä: {product['name']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['desc']}\n"
            f"üí∞ –¶–µ–Ω–∞: {product['price']} RUB\n"
            f"üÜî –í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {game_id}\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# === –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ ID ===
def change_game_id(call):
    try:
        user_id = int(call.data.split('_')[1])
        if user_id not in temp_orders:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        msg = bot.send_message(
            call.message.chat.id,
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π ID –≤ Brawl Stars (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
        )
        bot.register_next_step_handler(msg, update_game_id, user_id)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def update_game_id(message, user_id):
    try:
        game_id = message.text.strip()
        if not game_id.isdigit():
            msg = bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞: –ò–≥—Ä–æ–≤–æ–π ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:"
            )
            bot.register_next_step_handler(msg, update_game_id, user_id)
            return
        temp_orders[user_id]['game_id'] = game_id
        markup = types.InlineKeyboardMarkup(row_width=2)
        confirm_btn = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user_id}")
        change_btn = types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ID", callback_data=f"change_{user_id}")
        cancel_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{user_id}")
        markup.add(confirm_btn, change_btn, cancel_btn)
        bot.send_message(
            message.chat.id,
            f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n"
            f"üéÆ –ò–≥—Ä–∞: Brawl Stars\n"
            f"üõç –¢–æ–≤–∞—Ä: {temp_orders[user_id]['product']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {temp_orders[user_id]['description']}\n"
            f"üí∞ –¶–µ–Ω–∞: {temp_orders[user_id]['price']} RUB\n"
            f"üÜî –í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {game_id}\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ===
def confirm_order(call):
    try:
        user_id = int(call.data.split('_')[1])
        order = temp_orders.get(user_id)
        if not order:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        cursor.execute('''
            INSERT INTO orders (user_id, username, game, product, description, price, game_id, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            order['user_id'], order['username'], order['game'],
            order['product'], order['description'], order['price'],
            order['game_id'], 'pending_payment'
        ))
        conn.commit()
        order_db_id = cursor.lastrowid
        markup = types.InlineKeyboardMarkup(row_width=1)
        card_btn = types.InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data=f"pay_card_{order_db_id}")
        crypto_btn = types.InlineKeyboardButton("üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"pay_crypto_{order_db_id}")
        markup.add(card_btn, crypto_btn)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                 f"–¢–æ–≤–∞—Ä: {order['product']}\n"
                 f"–û–ø–∏—Å–∞–Ω–∏–µ: {order['description']}\n"
                 f"–°—É–º–º–∞: {order['price']} RUB\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã ===
def process_payment(call):
    try:
        payment_method = call.data.split('_')[1]
        order_db_id = call.data.split('_')[2]
        cursor.execute('SELECT * FROM orders WHERE id = ?', (order_db_id,))
        order = cursor.fetchone()
        if not order:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        cursor.execute('''
            UPDATE orders
            SET payment_method = ?, status = 'awaiting_payment'
            WHERE id = ?
        ''', (payment_method, order_db_id))
        conn.commit()
        payment_details = {
            'card': "üí≥ –ö–∞—Ä—Ç–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞: 2200 1234 5678 9010\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\nüí¨ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: " + str(order_db_id),
            'crypto': "üí∞ BTC: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\nüí∞ ETH: 0x71C7656EC7ab88b098defB751B7401B5f6d8976F\nüí¨ ID –ø–ª–∞—Ç–µ–∂–∞: " + str(order_db_id)
        }
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üí∏ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {payment_method.upper()}\n"
                 f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_details[payment_method]}\n"
                 f"üõç –¢–æ–≤–∞—Ä: {order[4]}\n"
                 f"üí∞ –°—É–º–º–∞: {order[6]} RUB\n"
                 f"üìå –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞/–ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
                 f"‚åõ –û–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 5-15 –º–∏–Ω—É—Ç",
            reply_markup=None
        )
        temp_payments[call.from_user.id] = {
            'order_id': order_db_id,
            'payment_method': payment_method
        }
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ–ø–ª–∞—Ç—ã ===
@bot.message_handler(content_types=['photo', 'document'])
def handle_payment_proof(message):
    try:
        if message.content_type not in ['photo', 'document']:
            bot.reply_to(message, "‚ùå –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª—ã —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏—è–º–∏.")
            return
        user_id = message.from_user.id
        payment_info = temp_payments.get(user_id)
        if not payment_info:
            bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –∑–∞–Ω–æ–≤–æ.")
            return
        if message.content_type == 'photo':
            file_id = message.photo[-1].file_id
        elif message.document.mime_type.startswith('image/'):
            file_id = message.document.file_id
        else:
            bot.reply_to(message, "‚ùå –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã/–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏).")
            return
        order_id = payment_info['order_id']
        cursor.execute('SELECT * FROM orders WHERE id = ?', (order_id,))
        order = cursor.fetchone()
        if not order:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return
        cursor.execute('''
            UPDATE orders
            SET payment_proof = ?, status = 'payment_review'
            WHERE id = ?
        ''', (file_id, order_id))
        conn.commit()
        order_details = (
            f"üÜï –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            f"üÜî –ó–∞–∫–∞–∑: #{order[0]}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {message.from_user.id})\n"
            f"üì± –ò–≥—Ä–æ–≤–æ–π ID: {order[7]}\n"
            f"üéÆ –ò–≥—Ä–∞: {order[3]}\n"
            f"üõç –¢–æ–≤–∞—Ä: {order[4]}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order[5]}\n"
            f"üí∞ –°—É–º–º–∞: {order[6]} RUB\n"
            f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order[8]}"
        )
        if message.content_type == 'photo':
            bot.send_photo(ADMIN, file_id, caption=order_details)
        else:
            bot.send_document(ADMIN, file_id, caption=order_details)
        markup = types.InlineKeyboardMarkup()
        confirm_btn = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"admin_confirm_{order_id}")
        reject_btn = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{order_id}")
        markup.add(confirm_btn, reject_btn)
        bot.send_message(ADMIN, "–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–æ–º:", reply_markup=markup)
        bot.reply_to(message, "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
def handle_admin_confirm(call):
    try:
        order_id = call.data.split('_')[2]
        cursor.execute('SELECT * FROM orders WHERE id = ?', (order_id,))
        order = cursor.fetchone()
        if not order:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        cursor.execute('''
            UPDATE orders 
            SET status = 'in_progress', admin_id = ?, confirmed_at = datetime('now')
            WHERE id = ?
        ''', (call.from_user.id, order_id))
        conn.commit()
        admin_orders[order_id] = {'admin_id': call.from_user.id, 'user_id': order[1]}
        bot.send_message(order[1], f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n–ó–∞–∫–∞–∑ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        markup = types.InlineKeyboardMarkup()
        complete_btn = types.InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"admin_complete_{order_id}")
        markup.add(complete_btn)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üõ† –ó–∞–∫–∞–∑ #{order_id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É:\n"
                 f"üõç –¢–æ–≤–∞—Ä: {order[4]}\n"
                 f"üí∞ –°—É–º–º–∞: {order[6]} RUB\n"
                 f"–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def handle_admin_reject(call):
    try:
        order_id = call.data.split('_')[2]
        cursor.execute('SELECT * FROM orders WHERE id = ?', (order_id,))
        order = cursor.fetchone()
        if not order:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        cursor.execute('''
            UPDATE orders 
            SET status = 'rejected', completed_at = datetime('now') 
            WHERE id = ?
        ''', (order_id,))
        conn.commit()
        bot.send_message(order[1], f"üö´ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n–ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω."
        )
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def handle_admin_complete(call):
    try:
        order_id = call.data.split('_')[2]
        if order_id not in admin_orders or admin_orders[order_id]['admin_id'] != call.from_user.id:
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º.", show_alert=True)
            return
        cursor.execute('''
            UPDATE orders 
            SET status = 'completed', completed_at = datetime('now') 
            WHERE id = ?
        ''', (order_id,))
        conn.commit()
        del admin_orders[order_id]
        cursor.execute('SELECT * FROM orders WHERE id = ?', (order_id,))
        order = cursor.fetchone()
        bot.send_message(order[1], f"üéâ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å!")
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω."
        )
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# === –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ ===
def cancel_order(call):
    try:
        user_id = int(call.data.split('_')[1])
        if user_id in temp_orders:
            del temp_orders[user_id]
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ ===
def admin_sales_statistics(message):
    if message.chat.id != ADMIN:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    cursor.execute('SELECT COUNT(*), SUM(price) FROM orders')
    total_orders, total_revenue = cursor.fetchone()
    cursor.execute('SELECT COUNT(*), SUM(price) FROM orders WHERE status = "completed"')
    completed_orders, completed_revenue = cursor.fetchone()
    avg_check = total_revenue / total_orders if total_orders else 0
    text = (
        f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂:\n"
        f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue or 0:.2f} ‚ÇΩ\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
        f"–î–æ—Ö–æ–¥ –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {completed_revenue or 0:.2f} ‚ÇΩ\n"
        f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_check:.2f} ‚ÇΩ"
    )
    bot.send_message(message.chat.id, text)

# === –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ ===
def admin_show_orders(message):
    if message.chat.id != ADMIN:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    cursor.execute('SELECT id, user_id, username, product, price, status, timestamp FROM orders ORDER BY timestamp DESC LIMIT 20')
    orders = cursor.fetchall()
    if not orders:
        bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        return
    text = "üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n"
    for order in orders:
        order_id, user_id, username, product, price, status, timestamp = order
        text += (
            f"#{order_id} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({user_id})\n"
            f"–¢–æ–≤–∞—Ä: {product}\n"
            f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–î–∞—Ç–∞: {timestamp}\n"
        )
    bot.send_message(message.chat.id, text)

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ ===
scheduler = BackgroundScheduler()
def send_scheduled_broadcasts():
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M')
    cursor.execute('SELECT id, message_text, photo_id FROM broadcasts WHERE send_time <= ? AND status = ?', (current_time, 'pending'))
    broadcasts = cursor.fetchall()
    for broadcast in broadcasts:
        broadcast_id, message_text, photo_id = broadcast
        cursor.execute('SELECT user_id FROM users')
        users = cursor.fetchall()
        for user in users:
            user_id = user[0]
            try:
                if photo_id:
                    bot.send_photo(user_id, photo_id, caption=message_text)
                else:
                    bot.send_message(user_id, message_text)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        cursor.execute('UPDATE broadcasts SET status = ? WHERE id = ?', ('sent', broadcast_id))
        conn.commit()
scheduler.add_job(send_scheduled_broadcasts, 'interval', minutes=1)
scheduler.start()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
try:
    bot.polling(none_stop=True)
except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")